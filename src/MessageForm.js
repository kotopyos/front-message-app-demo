import React, { useState } from 'react';
import './MessageForm.css';

function MessageForm({ onMessageSent }) {
  const [formData, setFormData] = useState({
    content: '',
    sender: ''
  });
  
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState({ text: '', type: '' });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.content.trim() || !formData.sender.trim()) {
      setMessage({ 
        text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 
        type: 'error' 
      });
      return;
    }
    
    setIsLoading(true);
    setMessage({ text: '', type: '' });
    
    try {
      const response = await fetch('http://192.168.0.112:8089/api/messages/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });
      
      const data = await response.json();
      
      if (response.ok && data.status === 'success') {
        setMessage({ 
          text: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka!', 
          type: 'success' 
        });
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        setFormData({ content: '', sender: '' });
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if (onMessageSent) {
          onMessageSent();
        }
      } else {
        setMessage({ 
          text: `‚ùå –û—à–∏–±–∫–∞: ${data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}`, 
          type: 'error' 
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
      setMessage({ 
        text: `‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`, 
        type: 'error' 
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="message-form-container">
      <div className="form-header">
        <h2>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka</h2>
        <p className="form-description">
          –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫ Kafka
        </p>
      </div>
      
      <form onSubmit={handleSubmit} className="message-form">
        <div className="form-group">
          <label htmlFor="sender" className="form-label">
            –í–∞—à–µ –∏–º—è:
          </label>
          <input
            type="text"
            id="sender"
            name="sender"
            value={formData.sender}
            onChange={handleChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
            className="form-input"
            disabled={isLoading}
            maxLength={50}
          />
          <span className="char-count">
            {formData.sender.length}/50
          </span>
        </div>
        
        <div className="form-group">
          <label htmlFor="content" className="form-label">
            –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
          </label>
          <textarea
            id="content"
            name="content"
            value={formData.content}
            onChange={handleChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
            rows="5"
            className="form-textarea"
            disabled={isLoading}
            maxLength={500}
          />
          <span className="char-count">
            {formData.content.length}/500
          </span>
        </div>
        
        <button 
          type="submit" 
          className="submit-button"
          disabled={isLoading}
        >
          {isLoading ? (
            <>
              <span className="loading-spinner-button"></span>
              –û—Ç–ø—Ä–∞–≤–∫–∞...
            </>
          ) : (
            <>üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</>
          )}
        </button>
      </form>
      
      {message.text && (
        <div className={`message-alert ${message.type}`}>
          {message.text}
        </div>
      )}
      
      <div className="form-info">
        <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <ul>
          <li>–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Ç–æ–ø–∏–∫ <code>demo-topic</code></li>
          <li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: 500 —Å–∏–º–≤–æ–ª–æ–≤</li>
          <li>–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"</li>
          <li>Backend API: <code>http://192.168.0.112:8089/api/messages</code></li>
        </ul>
      </div>
    </div>
  );
}

export default MessageForm;