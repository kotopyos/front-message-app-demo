import React, { useState, useEffect } from 'react';
import './MessageList.css';

function MessageList() {
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [filter, setFilter] = useState('');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const fetchMessages = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('http://192.168.0.112:8089/api/messages/list');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status === 'success' && data.messages) {
        setMessages(data.messages);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const clearMessages = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è?')) {
      return;
    }

    try {
      const response = await fetch('http://192.168.0.112:8089/api/messages/clear', {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      setMessages([]);
      alert('–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + err.message);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchMessages();
  }, []);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    let interval;
    if (autoRefresh) {
      interval = setInterval(() => {
        fetchMessages();
      }, 5000);
    }
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [autoRefresh]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const filteredMessages = messages.filter(msg => 
    (msg.username && msg.username.toLowerCase().includes(filter.toLowerCase())) ||
    (msg.message && msg.message.toLowerCase().includes(filter.toLowerCase()))
  );

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (timestamp) => {
    if (!timestamp) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    try {
      const date = new Date(timestamp);
      return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    } catch {
      return timestamp;
    }
  };

  return (
    <div className="message-list-container">
      <div className="message-list-header">
        <h2>–°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka</h2>
        <div className="message-list-controls">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É..."
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="search-input"
          />
          
          <label className="auto-refresh-label">
            <input
              type="checkbox"
              checked={autoRefresh}
              onChange={(e) => setAutoRefresh(e.target.checked)}
            />
            –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (5 —Å–µ–∫)
          </label>
          
          <button 
            onClick={fetchMessages} 
            disabled={loading}
            className="refresh-button"
          >
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
          
          <button 
            onClick={clearMessages}
            className="clear-button"
            disabled={messages.length === 0}
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </button>
        </div>
      </div>

      {error && (
        <div className="error-message">
          ‚ö†Ô∏è {error}
        </div>
      )}

      <div className="messages-stats">
        <span>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {filteredMessages.length}</span>
        {filter && <span> (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–∑ {messages.length})</span>}
      </div>

      {loading && messages.length === 0 ? (
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>
        </div>
      ) : filteredMessages.length === 0 ? (
        <div className="no-messages">
          {filter ? 
            `–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É "${filter}"` : 
            '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"!'
          }
        </div>
      ) : (
        <div className="messages-grid">
          {filteredMessages.map((message, index) => (
            <div key={message.id || index} className="message-card">
              <div className="message-header">
                <span className="message-sender">üë§ {message.username || '–ê–Ω–æ–Ω–∏–º'}</span>
                <span className="message-id">#{message.id ? message.id.slice(-8) : index}</span>
              </div>
              <div className="message-content">
                {message.message || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}
              </div>
              <div className="message-footer">
                <span className="message-timestamp">
                  üïê {formatDate(message.timestamp)}
                </span>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default MessageList;